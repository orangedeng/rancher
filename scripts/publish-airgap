#!/bin/bash
set -e

source $(dirname $0)/version

ARCH=${ARCH:-"amd64"}
SUFFIX=""
SYSTEM_CHART_DEFAULT_BRANCH=${SYSTEM_CHART_DEFAULT_BRANCH:-"release-v2.4-ent"}
[ "${ARCH}" != "amd64" ] && SUFFIX="_${ARCH}"

TAG=${TAG:-${VERSION}${SUFFIX}}
REPO=${REPO:-rancher}

if echo $TAG | grep -q dirty; then
    TAG=dev
fi

if [ -n "$DRONE_TAG" ]; then
    TAG=$DRONE_TAG
fi

cd $(dirname $0)/../bin
echo 'export rancher-images'

IMAGE=${REPO}/rancher:${TAG}
AGENT_IMAGE=${REPO}/rancher-agent:${TAG}

mkdir -p /tmp/system-charts && git clone --branch $SYSTEM_CHART_DEFAULT_BRANCH https://github.com/cnrancher/system-charts /tmp/system-charts
TAG=$TAG REPO=${REPO} go run ../pkg/image/export/main.go /tmp/system-charts $IMAGE $AGENT_IMAGE

echo 'Download pandaria images'

# download pandaria image list for airgap
export ASSET_ID=$(curl -sL -H "Authorization: token $OAUTH_TOKEN" https://api.github.com/repos/cnrancher/pandaria-auditlog-server/releases/tags/${AUDITLOG_SERVER_VERSION} | jq '.assets[]  | select(.name == "images.txt") | .id')
curl -J -sL -H "Authorization: token $OAUTH_TOKEN" -H "Accept: application/octet-stream" https://api.github.com/repos/cnrancher/pandaria-auditlog-server/releases/assets/$ASSET_ID -o auditlog-images.txt

export ASSET_ID=$(curl -sL -H "Authorization: token $OAUTH_TOKEN" https://api.github.com/repos/cnrancher/pandaria-auditlog-fluentbit/releases/tags/${AUDITLOG_FLUENTBIT_VERSION} | jq '.assets[]  | select(.name == "images.txt") | .id')
curl -J -sL -H "Authorization: token $OAUTH_TOKEN" -H "Accept: application/octet-stream" https://api.github.com/repos/cnrancher/pandaria-auditlog-fluentbit/releases/assets/$ASSET_ID -o fluentbit-images.txt

export ASSET_ID=$(curl -sL -H "Authorization: token $OAUTH_TOKEN" https://api.github.com/repos/cnrancher/gpu-scheduler-extender/releases/tags/${GPU_SCHEDULER_EXTENDER_VERSION} | jq '.assets[]  | select(.name == "images.txt") | .id')
curl -J -sL -H "Authorization: token $OAUTH_TOKEN" -H "Accept: application/octet-stream" https://api.github.com/repos/cnrancher/gpu-scheduler-extender/releases/assets/$ASSET_ID -o gpu-scheduler-extender-images.txt

export ASSET_ID=$(curl -sL -H "Authorization: token $OAUTH_TOKEN" https://api.github.com/repos/cnrancher/gpu-device-plugin/releases/tags/${GPU_DEVICE_PLUGIN_VERSION} | jq '.assets[]  | select(.name == "images.txt") | .id')
curl -J -sL -H "Authorization: token $OAUTH_TOKEN" -H "Accept: application/octet-stream" https://api.github.com/repos/cnrancher/gpu-device-plugin/releases/assets/$ASSET_ID -o gpu-device-plugin-images.txt

curl -sL https://pandaria-release.s3-ap-northeast-1.amazonaws.com/network-controller/${MACVLAN_NETWORK_ADDON_VERSION}/images.txt -o macvlan-images.txt
cat gpu-device-plugin-images.txt gpu-scheduler-extender-images.txt auditlog-images.txt fluentbit-images.txt macvlan-images.txt rancher-images.txt | sed 's/[ ][ ]*//g' > merge-images.txt

# sort and uniq
sort merge-images.txt | uniq > merge-images-uniq.txt

# rename file
mv merge-images-uniq.txt rancher-images.txt
